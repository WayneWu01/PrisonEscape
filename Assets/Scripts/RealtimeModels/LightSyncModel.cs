using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class LightSyncModel
{
    [RealtimeProperty(1, true, true)]
    private bool _lit;

    [RealtimeProperty(2, true, true)]
    private Color _color;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class LightSyncModel : RealtimeModel {
    public bool lit {
        get {
            return _litProperty.value;
        }
        set {
            if (_litProperty.value == value) return;
            _litProperty.value = value;
            InvalidateReliableLength();
            FireLitDidChange(value);
        }
    }
    
    public UnityEngine.Color color {
        get {
            return _colorProperty.value;
        }
        set {
            if (_colorProperty.value == value) return;
            _colorProperty.value = value;
            InvalidateReliableLength();
            FireColorDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(LightSyncModel model, T value);
    public event PropertyChangedHandler<bool> litDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> colorDidChange;
    
    public enum PropertyID : uint {
        Lit = 1,
        Color = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _litProperty;
    
    private ReliableProperty<UnityEngine.Color> _colorProperty;
    
    #endregion
    
    public LightSyncModel() : base(null) {
        _litProperty = new ReliableProperty<bool>(1, _lit);
        _colorProperty = new ReliableProperty<UnityEngine.Color>(2, _color);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _litProperty.UnsubscribeCallback();
        _colorProperty.UnsubscribeCallback();
    }
    
    private void FireLitDidChange(bool value) {
        try {
            litDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColorDidChange(UnityEngine.Color value) {
        try {
            colorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _litProperty.WriteLength(context);
        length += _colorProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _litProperty.Write(stream, context);
        writes |= _colorProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Lit: {
                    changed = _litProperty.Read(stream, context);
                    if (changed) FireLitDidChange(lit);
                    break;
                }
                case (uint) PropertyID.Color: {
                    changed = _colorProperty.Read(stream, context);
                    if (changed) FireColorDidChange(color);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _lit = lit;
        _color = color;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
